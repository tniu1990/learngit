1.创建版本库：

    初始化一个Git仓库，使用git init命令。

    添加文件到Git仓库，分两步：

    使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    使用命令git commit -m <message>，完成
    

2.时光机穿梭

    要随时掌握工作区的状态，使用git status命令。

    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
    
    
3.版本回退

    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令
    
    git reset --hard commit_id。

    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


4.工作区和暂存区

    git diff                 比较工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。
    git diff --cached        查看已暂存的和版本库里面最新版本的区别（即将要添加到下次提交里的内容）。
    git diff HEAD -- <file>  查看工作区和版本库里面最新版本的区别。


5.管理修改
    Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
    Git是如何跟踪修改的 -- 每次修改，如果不用git add到暂存区，那就不会加入到commit中。
    
    
6.撤销修改

    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令
    
    git checkout -- file。

    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令
    
    git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
    

7.删除文件

    rm test.txt 从本地删除该文件
  
    选择1(确实要从版本库中删除该文件)：
        git rm test.txt 从暂存区域删除该文件
        git commit -m "remove test.txt" 从版本库中删除该文件
        
    选择2(删错了，把误删的文件从版本库恢复到最新版本)：
        git checkout -- test.txt 从版本库恢复该文件
        （git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。）
        （注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！）
        

8.远程仓库

    第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
    
如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

    $ ssh-keygen -t rsa -C "youremail@example.com"
    
把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可，无需设置密码。

    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，

id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。


9.添加远程库

    首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
    
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。

    然后，根据GitHub的提示，在本地的learngit仓库下运行命令：
    
    $ git remote add origin https://github.com/自己的github账户名/learngit.git
    
    或者
    
    $ git remote add origin git@github.com:账户名/learngit.git

    最后，把本地库的所有内容推送到远程库上：
    
    $ git push -u origin master
    
    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
    
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

    从现在起，只要本地作了提交，就可以通过命令：
    
    $ git push origin master
    
    
10.从远程库克隆

		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
		
		Git支持多种协议，包括https，但ssh协议速度最快
		
		//ssh
		git clone git@gitee.com:tniu1990/gitskill.git 
		
		//https
		git clone https://gitee.com/tniu1990/gitskill.git


11.创建与合并分支

		查看分支：git branch
		
		创建分支：git branch <name>
		
		切换分支：git checkout <name>或者git switch <name>
		
		创建+切换分支：git checkout -b <name>或者git switch -c <name>
		
		合并某分支到当前分支：git merge <name>
		
		删除分支：git branch -d <name>
		
		
12.解决冲突

		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		
		解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
		
		用git log --graph命令可以看到分支合并图
		
		$ git log --graph --pretty=oneline --abbrev-commit
		
		*   f0c42bb (HEAD -> master) conflict fixed
		|\
		| * 0c34c88 (feature1) AND simple
		* | 62dc980 & simple
		|/
		* c2b07b8 update note to 11
		*   bf98502 Merge branch 'dev'
		|\
		| * 0badb0f branch test
		* | 307c7ef update note to 10
		|/
		* 76ac699 delete LICENSE
		* 4a32588 (origin/master) update note to 9
		* a87b7fe update to 7
		* 3eaca04 remove test.txt
		* 61f85c1 add test.txt
		* d17255d my note of learning git
		* 910c249 append of files
		* 94a90e6 git tracks changes
		* 5f0e5b9 add enter
		* fadc2b2 understand how stage works
		* fe282a9 append GPL
		* 4991ec7 add a distributed
		* 07868f9 wrote a readme file


13.分支管理策略

		通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
		
		如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
		
		$ git merge --no-ff -m "merge with no-ff" dev
		
		因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
		
		
14.Bug分支

    修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
		
		在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。


15.Feature分支

		开发一个新feature，最好新建一个分支；
		
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
		
		
16.多人协作

    查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用git branch --set-upstream-to <branch-name> origin/<branch-name>

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


17.Rebase/变基


		rebase操作可以把本地未push的分叉提交历史整理成直线；
		
		rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比
		
		Merge和Rebase的差异：
		
		merge : 三方合并（2分支(master(C3)+experiment(C4))+共同祖先(C2)），授人以鱼
		       
		       $ git checkout master(C3)
		       $ git merge --no-ff -m "merge experiment(C4)" experiment(C4)
		
		rebase :差分合并（C3+(C4-C2)）,授人以渔
		
		       $ git checkout experiment(C4)
		       $ git rebase master(C3)
		       检出 experiment 分支，然后将它变基到 master 分支上
		       
		       $ git checkout master(C3)
		       $ git merge experiment(C4)
		       回到 master 分支，进行一次快进合并
		       
		Rebase引申:
		
		$ git rebase --onto master server client
		以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，
让 client 看起来像直接基于 master 修改一样"。
		
		$ git checkout master
		$ git merge client
		快进合并 master 分支，使之包含来自 client 分支的修改

		$ git rebase master server
		将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）
变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。
		
		$ git checkout master
		$ git merge server
		然后就可以快进合并主分支 master 了
		
		$ git branch -d client
		$ git branch -d serve
		至此，client 和 server 分支中的修改都已经整合到主分支里了，删除这两个分支，最终提交历史会变成一条没有分支的直线。
		
	
18.创建/操作标签
		
		命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		
		命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		
		命令git tag可以查看所有标签。
		
		命令git push origin <tagname>可以推送一个本地标签；
		
		命令git push origin --tags可以推送全部未推送过的本地标签；
		
		命令git tag -d <tagname>可以删除一个本地标签；
		
		命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
		

19.使用GitHub
		
		在GitHub上，可以任意Fork开源仓库；
		
		自己拥有Fork后的仓库的读写权限；
		
		可以推送pull request给官方仓库来贡献代码。
		
		
20.忽略特殊文件

		忽略某些文件时，需要编写.gitignore；
		
		.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
		
		想添加被gitignore忽略的文件，可以用-f强制添加到Git：

		$ git add -f App.class
		
		或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：

		$ git check-ignore -v App.class
		.gitignore:3:*.class	App.class
		
		即.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。
		
		例外规则：
		
		# 不排除.gitignore和App.class:
		!.gitignore
		!App.class


21.配置别名

		$ git config --global alias.st status
		告诉Git，以后st就表示status
		
		$ git config --global alias.co checkout
		$ git config --global alias.ci commit
		$ git config --global alias.br branch
		$ git config --global alias.unstage 'reset HEAD'
    $ git config --global alias.last 'log -1'
    $ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
		
		配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
		
		配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中。

22.Git图形界面工具

    首先从官网下载SourceTree并安装，然后直接运行SourceTree。

