1.创建版本库：

    初始化一个Git仓库，使用git init命令。

    添加文件到Git仓库，分两步：

    使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    使用命令git commit -m <message>，完成
    


2.时光机穿梭

    要随时掌握工作区的状态，使用git status命令。

    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
    
    

3.版本回退

    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。



4.工作区和暂存区

    git diff                 比较工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。
    git diff --cached        查看已暂存的和版本库里面最新版本的区别（即将要添加到下次提交里的内容）。
    git diff HEAD -- <file>  查看工作区和版本库里面最新版本的区别。



5.管理修改
    Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
    Git是如何跟踪修改的 -- 每次修改，如果不用git add到暂存区，那就不会加入到commit中。
    
    
6.撤销修改

    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
    
    

7.删除文件

    rm test.txt 从本地删除该文件
  
    选择1(确实要从版本库中删除该文件)：
        git rm test.txt 从暂存区域删除该文件
        git commit -m "remove test.txt" 从版本库中删除该文件
        
    选择2(删错了，把误删的文件从版本库恢复到最新版本)：
        git checkout -- test.txt 从版本库恢复该文件
        （git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。）
        （注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！）
        

8.远程仓库

    第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
    
如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

    $ ssh-keygen -t rsa -C "youremail@example.com"
    
把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可，无需设置密码。

    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，

id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。



9.添加远程库

    首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
    
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。

    然后，根据GitHub的提示，在本地的learngit仓库下运行命令：
    
    $ git remote add origin https://github.com/自己的github账户名/learngit.git

    最后，把本地库的所有内容推送到远程库上：
    
    $ git push -u origin master
    
    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
    
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

    从现在起，只要本地作了提交，就可以通过命令：
    
    $ git push origin master